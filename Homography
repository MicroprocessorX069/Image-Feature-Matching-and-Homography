{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Project2.1.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python2",
      "display_name": "Python 2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MicroprocessorX069/Image-Feature-Matching-and-Homography/blob/master/Homography\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "iZYTjw3S2fYp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "67592c5e-27be-4be1-85c6-940c0bdcd250"
      },
      "cell_type": "code",
      "source": [
        "!pip install opencv-python==3.4.2.16\n",
        "!pip install opencv-contrib-python==3.4.2.16"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: opencv-python==3.4.2.16 in /usr/local/lib/python2.7/dist-packages (3.4.2.16)\n",
            "Requirement already satisfied: numpy>=1.11.1 in /usr/local/lib/python2.7/dist-packages (from opencv-python==3.4.2.16) (1.14.6)\n",
            "Requirement already satisfied: opencv-contrib-python==3.4.2.16 in /usr/local/lib/python2.7/dist-packages (3.4.2.16)\n",
            "Requirement already satisfied: numpy>=1.11.1 in /usr/local/lib/python2.7/dist-packages (from opencv-contrib-python==3.4.2.16) (1.14.6)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "RT7YL2eH2y6N",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "3f085de6-f2ee-4c57-cc58-f741387d7048"
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import cv2 as cv\n",
        "from matplotlib import pyplot as plt\n",
        "Min_matches=10\n",
        "img1=cv.imread('mountain1.jpg',0)\n",
        "img2=cv.imread('mountain2.jpg',0)\n",
        "\n",
        "sift=cv.xfeatures2d.SIFT_create()\n",
        "kp1, des1=sift.detectAndCompute(img1, None) # Here mask is None.\n",
        "kp2, des2=sift.detectAndCompute(img2, None)\n",
        "\n",
        "Flann_index=1\n",
        "#dict() is just a function to create a dictionary of arguments \n",
        "#More arguments can be kept than required by the method\n",
        "\n",
        "index_param= dict(algorithm=Flann_index,trees=5)\n",
        "search_param=dict(checks=50)\n",
        "flann=cv.FlannBasedMatcher(index_param,search_param)\n",
        "matches=flann.knnMatch(des1,des2,k=2)\n",
        "good_matches=[]\n",
        "for m,n in matches:\n",
        "  if m.distance<0.7*n.distance:\n",
        "    good_matches.append(m)\n",
        "\n",
        "#Set a condition of n matches to find an object\n",
        "#If found, extract the locations, to find the perspective transform\n",
        "\n",
        "if(len(good_matches)>Min_matches):\n",
        "  #queryIdx and trainIdx are the descriptors of the good matched locations\n",
        "  src_pts=np.float32([kp1[m.queryIdx].pt for m in good_matches]).reshape(-1,1,2)\n",
        "  dst_pts=np.float32([kp2[m.trainIdx].pt for m in good_matches]).reshape(-1,1,2)\n",
        "  \n",
        "  M,mask=cv.findHomography(src_pts,dst_pts,cv.RANSAC,5.0)\n",
        "  matchesMask=mask.ravel().tolist()\n",
        "  \n",
        "  h,w=img1.shape\n",
        "  pts=np.float32([[0,0],[0,h-1],[w-1,h-1],[w-1,0]]).reshape(-1,1,2)\n",
        "  dst=cv.perspectiveTransform(pts,M)\n",
        "  \n",
        "  img2=cv.polylines(img2,[np.int32(dst)],True,255,3,cv.LINE_AA)\n",
        "\n",
        "else:\n",
        "  print(\"not enoug matches\")\n",
        "  matchesMask=None\n",
        "  \n",
        "draw_param=dict(matchColor=(0,255,0), singlePointColor=None, matchesMask= matchesMask, flags=2)\n",
        "imgQ4= cv.drawMatches(img1,kp1,img2,kp2,good_matches,None,**draw_param)\n",
        "cv.imwrite(\"Task1_4.jpg\",imgQ4)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "metadata": {
        "id": "OFefvhNMKImd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "4829f8e5-68f1-413e-af95-d71912d6c558"
      },
      "cell_type": "code",
      "source": [
        "M"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.59115225e+00, -2.92125486e-01, -3.96425126e+02],\n",
              "       [ 4.50514622e-01,  1.43185534e+00, -1.90941742e+02],\n",
              "       [ 1.21683023e-03, -6.44787891e-05,  1.00000000e+00]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    }
  ]
}